/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace DataTypes {
  export type ReserveConfigurationMapStruct = { data: BigNumberish };

  export type ReserveConfigurationMapStructOutput = [data: bigint] & {
    data: bigint;
  };

  export type ReserveDataStruct = {
    configuration: DataTypes.ReserveConfigurationMapStruct;
    liquidityIndex: BigNumberish;
    variableBorrowIndex: BigNumberish;
    currentLiquidityRate: BigNumberish;
    currentVariableBorrowRate: BigNumberish;
    currentStableBorrowRate: BigNumberish;
    lastUpdateTimestamp: BigNumberish;
    aTokenAddress: AddressLike;
    stableDebtTokenAddress: AddressLike;
    variableDebtTokenAddress: AddressLike;
    interestRateStrategyAddress: AddressLike;
    id: BigNumberish;
  };

  export type ReserveDataStructOutput = [
    configuration: DataTypes.ReserveConfigurationMapStructOutput,
    liquidityIndex: bigint,
    variableBorrowIndex: bigint,
    currentLiquidityRate: bigint,
    currentVariableBorrowRate: bigint,
    currentStableBorrowRate: bigint,
    lastUpdateTimestamp: bigint,
    aTokenAddress: string,
    stableDebtTokenAddress: string,
    variableDebtTokenAddress: string,
    interestRateStrategyAddress: string,
    id: bigint
  ] & {
    configuration: DataTypes.ReserveConfigurationMapStructOutput;
    liquidityIndex: bigint;
    variableBorrowIndex: bigint;
    currentLiquidityRate: bigint;
    currentVariableBorrowRate: bigint;
    currentStableBorrowRate: bigint;
    lastUpdateTimestamp: bigint;
    aTokenAddress: string;
    stableDebtTokenAddress: string;
    variableDebtTokenAddress: string;
    interestRateStrategyAddress: string;
    id: bigint;
  };

  export type UserConfigurationMapStruct = { data: BigNumberish };

  export type UserConfigurationMapStructOutput = [data: bigint] & {
    data: bigint;
  };
}

export interface ILendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "borrow"
      | "borrow(address,uint256,uint256,uint16,address)"
      | "deposit"
      | "deposit(address,uint256,address,uint16)"
      | "finalizeTransfer"
      | "finalizeTransfer(address,address,address,uint256,uint256,uint256)"
      | "flashLoan"
      | "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)"
      | "getAddressesProvider"
      | "getAddressesProvider()"
      | "getConfiguration"
      | "getConfiguration(address)"
      | "getReserveData"
      | "getReserveData(address)"
      | "getReserveNormalizedIncome"
      | "getReserveNormalizedIncome(address)"
      | "getReserveNormalizedVariableDebt"
      | "getReserveNormalizedVariableDebt(address)"
      | "getReservesList"
      | "getReservesList()"
      | "getUserAccountData"
      | "getUserAccountData(address)"
      | "getUserConfiguration"
      | "getUserConfiguration(address)"
      | "initReserve"
      | "initReserve(address,address,address,address,address)"
      | "liquidationCall"
      | "liquidationCall(address,address,address,uint256,bool)"
      | "paused"
      | "paused()"
      | "rebalanceStableBorrowRate"
      | "rebalanceStableBorrowRate(address,address)"
      | "repay"
      | "repay(address,uint256,uint256,address)"
      | "setConfiguration"
      | "setConfiguration(address,uint256)"
      | "setPause"
      | "setPause(bool)"
      | "setReserveInterestRateStrategyAddress"
      | "setReserveInterestRateStrategyAddress(address,address)"
      | "setUserUseReserveAsCollateral"
      | "setUserUseReserveAsCollateral(address,bool)"
      | "swapBorrowRateMode"
      | "swapBorrowRateMode(address,uint256)"
      | "withdraw"
      | "withdraw(address,uint256,address)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrow"
      | "Borrow(address,address,address,uint256,uint256,uint256,uint16)"
      | "Deposit"
      | "Deposit(address,address,address,uint256,uint16)"
      | "FlashLoan"
      | "FlashLoan(address,address,address,uint256,uint256,uint16)"
      | "LiquidationCall"
      | "LiquidationCall(address,address,address,uint256,uint256,address,bool)"
      | "Paused"
      | "Paused()"
      | "RebalanceStableBorrowRate"
      | "RebalanceStableBorrowRate(address,address)"
      | "Repay"
      | "Repay(address,address,address,uint256)"
      | "ReserveDataUpdated"
      | "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)"
      | "ReserveUsedAsCollateralDisabled"
      | "ReserveUsedAsCollateralDisabled(address,address)"
      | "ReserveUsedAsCollateralEnabled"
      | "ReserveUsedAsCollateralEnabled(address,address)"
      | "Swap"
      | "Swap(address,address,uint256)"
      | "Unpaused"
      | "Unpaused()"
      | "Withdraw"
      | "Withdraw(address,address,address,uint256)"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256,uint16,address)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(address,uint256,address,uint16)",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTransfer",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      AddressLike,
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
    values: [
      AddressLike,
      AddressLike[],
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressesProvider()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedIncome",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedIncome(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedVariableDebt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveNormalizedVariableDebt(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReservesList()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserConfiguration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserConfiguration(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserve",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserve(address,address,address,address,address)",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall(address,address,address,uint256,bool)",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address,uint256,uint256,address)",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfiguration(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPause(bool)",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256,address)",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256,uint16,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit(address,uint256,address,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeTransfer(address,address,address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressesProvider()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedIncome",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedIncome(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedVariableDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveNormalizedVariableDebt(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReservesList()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserConfiguration(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserve(address,address,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall(address,address,address,uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repay(address,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConfiguration(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPause(bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256,address)",
    data: BytesLike
  ): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    onBehalfOf: AddressLike,
    amount: BigNumberish,
    borrowRateMode: BigNumberish,
    borrowRate: BigNumberish,
    referral: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    onBehalfOf: string,
    amount: bigint,
    borrowRateMode: bigint,
    borrowRate: bigint,
    referral: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: bigint;
    borrowRateMode: bigint;
    borrowRate: bigint;
    referral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    onBehalfOf: AddressLike,
    amount: BigNumberish,
    referral: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    onBehalfOf: string,
    amount: bigint,
    referral: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    onBehalfOf: string;
    amount: bigint;
    referral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanEvent {
  export type InputTuple = [
    target: AddressLike,
    initiator: AddressLike,
    asset: AddressLike,
    amount: BigNumberish,
    premium: BigNumberish,
    referralCode: BigNumberish
  ];
  export type OutputTuple = [
    target: string,
    initiator: string,
    asset: string,
    amount: bigint,
    premium: bigint,
    referralCode: bigint
  ];
  export interface OutputObject {
    target: string;
    initiator: string;
    asset: string;
    amount: bigint;
    premium: bigint;
    referralCode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationCallEvent {
  export type InputTuple = [
    collateralAsset: AddressLike,
    debtAsset: AddressLike,
    user: AddressLike,
    debtToCover: BigNumberish,
    liquidatedCollateralAmount: BigNumberish,
    liquidator: AddressLike,
    receiveAToken: boolean
  ];
  export type OutputTuple = [
    collateralAsset: string,
    debtAsset: string,
    user: string,
    debtToCover: bigint,
    liquidatedCollateralAmount: bigint,
    liquidator: string,
    receiveAToken: boolean
  ];
  export interface OutputObject {
    collateralAsset: string;
    debtAsset: string;
    user: string;
    debtToCover: bigint;
    liquidatedCollateralAmount: bigint;
    liquidator: string;
    receiveAToken: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalanceStableBorrowRateEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    repayer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    repayer: string,
    amount: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    repayer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveDataUpdatedEvent {
  export type InputTuple = [
    reserve: AddressLike,
    liquidityRate: BigNumberish,
    stableBorrowRate: BigNumberish,
    variableBorrowRate: BigNumberish,
    liquidityIndex: BigNumberish,
    variableBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    liquidityRate: bigint,
    stableBorrowRate: bigint,
    variableBorrowRate: bigint,
    liquidityIndex: bigint,
    variableBorrowIndex: bigint
  ];
  export interface OutputObject {
    reserve: string;
    liquidityRate: bigint;
    stableBorrowRate: bigint;
    variableBorrowRate: bigint;
    liquidityIndex: bigint;
    variableBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralDisabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveUsedAsCollateralEnabledEvent {
  export type InputTuple = [reserve: AddressLike, user: AddressLike];
  export type OutputTuple = [reserve: string, user: string];
  export interface OutputObject {
    reserve: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    rateMode: BigNumberish
  ];
  export type OutputTuple = [reserve: string, user: string, rateMode: bigint];
  export interface OutputObject {
    reserve: string;
    user: string;
    rateMode: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    reserve: AddressLike,
    user: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    reserve: string,
    user: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    reserve: string;
    user: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): ILendingPool;
  waitForDeployment(): Promise<this>;

  interface: ILendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  borrow: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "borrow(address,uint256,uint256,uint16,address)": TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "deposit(address,uint256,address,uint16)": TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  finalizeTransfer: TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "finalizeTransfer(address,address,address,uint256,uint256,uint256)": TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  flashLoan: TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAddressesProvider: TypedContractMethod<[], [string], "view">;

  "getAddressesProvider()": TypedContractMethod<[], [string], "view">;

  getConfiguration: TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveConfigurationMapStructOutput],
    "view"
  >;

  "getConfiguration(address)": TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveConfigurationMapStructOutput],
    "view"
  >;

  getReserveData: TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveDataStructOutput],
    "view"
  >;

  "getReserveData(address)": TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveDataStructOutput],
    "view"
  >;

  getReserveNormalizedIncome: TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  "getReserveNormalizedIncome(address)": TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  getReserveNormalizedVariableDebt: TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  "getReserveNormalizedVariableDebt(address)": TypedContractMethod<
    [asset: AddressLike],
    [bigint],
    "view"
  >;

  getReservesList: TypedContractMethod<[], [string[]], "view">;

  "getReservesList()": TypedContractMethod<[], [string[]], "view">;

  getUserAccountData: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralETH: bigint;
        totalDebtETH: bigint;
        availableBorrowsETH: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  "getUserAccountData(address)": TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralETH: bigint;
        totalDebtETH: bigint;
        availableBorrowsETH: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;

  getUserConfiguration: TypedContractMethod<
    [user: AddressLike],
    [DataTypes.UserConfigurationMapStructOutput],
    "view"
  >;

  "getUserConfiguration(address)": TypedContractMethod<
    [user: AddressLike],
    [DataTypes.UserConfigurationMapStructOutput],
    "view"
  >;

  initReserve: TypedContractMethod<
    [
      reserve: AddressLike,
      aTokenAddress: AddressLike,
      stableDebtAddress: AddressLike,
      variableDebtAddress: AddressLike,
      interestRateStrategyAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  "initReserve(address,address,address,address,address)": TypedContractMethod<
    [
      reserve: AddressLike,
      aTokenAddress: AddressLike,
      stableDebtAddress: AddressLike,
      variableDebtAddress: AddressLike,
      interestRateStrategyAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  liquidationCall: TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  "liquidationCall(address,address,address,uint256,bool)": TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  "paused()": TypedContractMethod<[], [boolean], "view">;

  rebalanceStableBorrowRate: TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  "rebalanceStableBorrowRate(address,address)": TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;

  repay: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  "repay(address,uint256,uint256,address)": TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  setConfiguration: TypedContractMethod<
    [reserve: AddressLike, configuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setConfiguration(address,uint256)": TypedContractMethod<
    [reserve: AddressLike, configuration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[val: boolean], [void], "nonpayable">;

  "setPause(bool)": TypedContractMethod<[val: boolean], [void], "nonpayable">;

  setReserveInterestRateStrategyAddress: TypedContractMethod<
    [reserve: AddressLike, rateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  "setReserveInterestRateStrategyAddress(address,address)": TypedContractMethod<
    [reserve: AddressLike, rateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setUserUseReserveAsCollateral: TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;

  "setUserUseReserveAsCollateral(address,bool)": TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;

  swapBorrowRateMode: TypedContractMethod<
    [asset: AddressLike, rateMode: BigNumberish],
    [void],
    "nonpayable"
  >;

  "swapBorrowRateMode(address,uint256)": TypedContractMethod<
    [asset: AddressLike, rateMode: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  "withdraw(address,uint256,address)": TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow(address,uint256,uint256,uint16,address)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      interestRateMode: BigNumberish,
      referralCode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(address,uint256,address,uint16)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      onBehalfOf: AddressLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeTransfer"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeTransfer(address,address,address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      balanceFromAfter: BigNumberish,
      balanceToBefore: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)"
  ): TypedContractMethod<
    [
      receiverAddress: AddressLike,
      assets: AddressLike[],
      amounts: BigNumberish[],
      modes: BigNumberish[],
      onBehalfOf: AddressLike,
      params: BytesLike,
      referralCode: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAddressesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressesProvider()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getConfiguration"
  ): TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveConfigurationMapStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfiguration(address)"
  ): TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveConfigurationMapStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveData"
  ): TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveData(address)"
  ): TypedContractMethod<
    [asset: AddressLike],
    [DataTypes.ReserveDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReserveNormalizedIncome"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReserveNormalizedIncome(address)"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReserveNormalizedVariableDebt"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReserveNormalizedVariableDebt(address)"
  ): TypedContractMethod<[asset: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReservesList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getReservesList()"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUserAccountData"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralETH: bigint;
        totalDebtETH: bigint;
        availableBorrowsETH: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAccountData(address)"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalCollateralETH: bigint;
        totalDebtETH: bigint;
        availableBorrowsETH: bigint;
        currentLiquidationThreshold: bigint;
        ltv: bigint;
        healthFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserConfiguration"
  ): TypedContractMethod<
    [user: AddressLike],
    [DataTypes.UserConfigurationMapStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserConfiguration(address)"
  ): TypedContractMethod<
    [user: AddressLike],
    [DataTypes.UserConfigurationMapStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "initReserve"
  ): TypedContractMethod<
    [
      reserve: AddressLike,
      aTokenAddress: AddressLike,
      stableDebtAddress: AddressLike,
      variableDebtAddress: AddressLike,
      interestRateStrategyAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initReserve(address,address,address,address,address)"
  ): TypedContractMethod<
    [
      reserve: AddressLike,
      aTokenAddress: AddressLike,
      stableDebtAddress: AddressLike,
      variableDebtAddress: AddressLike,
      interestRateStrategyAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationCall"
  ): TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationCall(address,address,address,uint256,bool)"
  ): TypedContractMethod<
    [
      collateralAsset: AddressLike,
      debtAsset: AddressLike,
      user: AddressLike,
      debtToCover: BigNumberish,
      receiveAToken: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "paused()"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rebalanceStableBorrowRate"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rebalanceStableBorrowRate(address,address)"
  ): TypedContractMethod<
    [asset: AddressLike, user: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repay(address,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      rateMode: BigNumberish,
      onBehalfOf: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfiguration"
  ): TypedContractMethod<
    [reserve: AddressLike, configuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfiguration(address,uint256)"
  ): TypedContractMethod<
    [reserve: AddressLike, configuration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[val: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause(bool)"
  ): TypedContractMethod<[val: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveInterestRateStrategyAddress"
  ): TypedContractMethod<
    [reserve: AddressLike, rateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveInterestRateStrategyAddress(address,address)"
  ): TypedContractMethod<
    [reserve: AddressLike, rateStrategyAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserUseReserveAsCollateral"
  ): TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUserUseReserveAsCollateral(address,bool)"
  ): TypedContractMethod<
    [asset: AddressLike, useAsCollateral: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapBorrowRateMode"
  ): TypedContractMethod<
    [asset: AddressLike, rateMode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapBorrowRateMode(address,uint256)"
  ): TypedContractMethod<
    [asset: AddressLike, rateMode: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(address,uint256,address)"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Borrow(address,address,address,uint256,uint256,uint256,uint16)"
  ): TypedContractEvent<
    Borrow_address_address_address_uint256_uint256_uint256_uint16_Event.InputTuple,
    Borrow_address_address_address_uint256_uint256_uint256_uint16_Event.OutputTuple,
    Borrow_address_address_address_uint256_uint256_uint256_uint16_Event.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Deposit(address,address,address,uint256,uint16)"
  ): TypedContractEvent<
    Deposit_address_address_address_uint256_uint16_Event.InputTuple,
    Deposit_address_address_address_uint256_uint16_Event.OutputTuple,
    Deposit_address_address_address_uint256_uint16_Event.OutputObject
  >;
  getEvent(
    key: "FlashLoan"
  ): TypedContractEvent<
    FlashLoanEvent.InputTuple,
    FlashLoanEvent.OutputTuple,
    FlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoan(address,address,address,uint256,uint256,uint16)"
  ): TypedContractEvent<
    FlashLoan_address_address_address_uint256_uint256_uint16_Event.InputTuple,
    FlashLoan_address_address_address_uint256_uint256_uint16_Event.OutputTuple,
    FlashLoan_address_address_address_uint256_uint256_uint16_Event.OutputObject
  >;
  getEvent(
    key: "LiquidationCall"
  ): TypedContractEvent<
    LiquidationCallEvent.InputTuple,
    LiquidationCallEvent.OutputTuple,
    LiquidationCallEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationCall(address,address,address,uint256,uint256,address,bool)"
  ): TypedContractEvent<
    LiquidationCall_address_address_address_uint256_uint256_address_bool_Event.InputTuple,
    LiquidationCall_address_address_address_uint256_uint256_address_bool_Event.OutputTuple,
    LiquidationCall_address_address_address_uint256_uint256_address_bool_Event.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Paused()"
  ): TypedContractEvent<
    Paused__Event.InputTuple,
    Paused__Event.OutputTuple,
    Paused__Event.OutputObject
  >;
  getEvent(
    key: "RebalanceStableBorrowRate"
  ): TypedContractEvent<
    RebalanceStableBorrowRateEvent.InputTuple,
    RebalanceStableBorrowRateEvent.OutputTuple,
    RebalanceStableBorrowRateEvent.OutputObject
  >;
  getEvent(
    key: "RebalanceStableBorrowRate(address,address)"
  ): TypedContractEvent<
    RebalanceStableBorrowRate_address_address_Event.InputTuple,
    RebalanceStableBorrowRate_address_address_Event.OutputTuple,
    RebalanceStableBorrowRate_address_address_Event.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "Repay(address,address,address,uint256)"
  ): TypedContractEvent<
    Repay_address_address_address_uint256_Event.InputTuple,
    Repay_address_address_address_uint256_Event.OutputTuple,
    Repay_address_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ReserveDataUpdated"
  ): TypedContractEvent<
    ReserveDataUpdatedEvent.InputTuple,
    ReserveDataUpdatedEvent.OutputTuple,
    ReserveDataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)"
  ): TypedContractEvent<
    ReserveDataUpdated_address_uint256_uint256_uint256_uint256_uint256_Event.InputTuple,
    ReserveDataUpdated_address_uint256_uint256_uint256_uint256_uint256_Event.OutputTuple,
    ReserveDataUpdated_address_uint256_uint256_uint256_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralDisabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralDisabledEvent.InputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputTuple,
    ReserveUsedAsCollateralDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralDisabled(address,address)"
  ): TypedContractEvent<
    ReserveUsedAsCollateralDisabled_address_address_Event.InputTuple,
    ReserveUsedAsCollateralDisabled_address_address_Event.OutputTuple,
    ReserveUsedAsCollateralDisabled_address_address_Event.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralEnabled"
  ): TypedContractEvent<
    ReserveUsedAsCollateralEnabledEvent.InputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputTuple,
    ReserveUsedAsCollateralEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ReserveUsedAsCollateralEnabled(address,address)"
  ): TypedContractEvent<
    ReserveUsedAsCollateralEnabled_address_address_Event.InputTuple,
    ReserveUsedAsCollateralEnabled_address_address_Event.OutputTuple,
    ReserveUsedAsCollateralEnabled_address_address_Event.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Swap(address,address,uint256)"
  ): TypedContractEvent<
    Swap_address_address_uint256_Event.InputTuple,
    Swap_address_address_uint256_Event.OutputTuple,
    Swap_address_address_uint256_Event.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused()"
  ): TypedContractEvent<
    Unpaused__Event.InputTuple,
    Unpaused__Event.OutputTuple,
    Unpaused__Event.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw(address,address,address,uint256)"
  ): TypedContractEvent<
    Withdraw_address_address_address_uint256_Event.InputTuple,
    Withdraw_address_address_address_uint256_Event.OutputTuple,
    Withdraw_address_address_address_uint256_Event.OutputObject
  >;

  filters: {
    "Borrow(address,address,address,uint256,uint256,uint256,uint16)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Deposit(address,address,address,uint256,uint16)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "FlashLoan(address,address,address,uint256,uint256,uint16)": TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;
    FlashLoan: TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;

    "LiquidationCall(address,address,address,uint256,uint256,address,bool)": TypedContractEvent<
      LiquidationCallEvent.InputTuple,
      LiquidationCallEvent.OutputTuple,
      LiquidationCallEvent.OutputObject
    >;
    LiquidationCall: TypedContractEvent<
      LiquidationCallEvent.InputTuple,
      LiquidationCallEvent.OutputTuple,
      LiquidationCallEvent.OutputObject
    >;

    "Paused()": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RebalanceStableBorrowRate(address,address)": TypedContractEvent<
      RebalanceStableBorrowRateEvent.InputTuple,
      RebalanceStableBorrowRateEvent.OutputTuple,
      RebalanceStableBorrowRateEvent.OutputObject
    >;
    RebalanceStableBorrowRate: TypedContractEvent<
      RebalanceStableBorrowRateEvent.InputTuple,
      RebalanceStableBorrowRateEvent.OutputTuple,
      RebalanceStableBorrowRateEvent.OutputObject
    >;

    "Repay(address,address,address,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "ReserveDataUpdated(address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;
    ReserveDataUpdated: TypedContractEvent<
      ReserveDataUpdatedEvent.InputTuple,
      ReserveDataUpdatedEvent.OutputTuple,
      ReserveDataUpdatedEvent.OutputObject
    >;

    "ReserveUsedAsCollateralDisabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralDisabled: TypedContractEvent<
      ReserveUsedAsCollateralDisabledEvent.InputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputTuple,
      ReserveUsedAsCollateralDisabledEvent.OutputObject
    >;

    "ReserveUsedAsCollateralEnabled(address,address)": TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;
    ReserveUsedAsCollateralEnabled: TypedContractEvent<
      ReserveUsedAsCollateralEnabledEvent.InputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputTuple,
      ReserveUsedAsCollateralEnabledEvent.OutputObject
    >;

    "Swap(address,address,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Unpaused()": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
